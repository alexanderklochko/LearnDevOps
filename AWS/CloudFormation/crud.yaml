Description:  This template deploys a VPC, with a pair of public and private subnets spread
  across two Availability Zones. It deploys an internet gateway, with ...

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Default: Crud
    Type: String
  InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues: [t2.nano, t2.micro, t2.small, t2.medium, t3.nano, t3.micro, t3.small, t3.medium]
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  AmiId:
    Type: String
    Default: 'ami-08722fffad032e569'
  S3bucketURI:
    Type: String
    Default: s3://crudprivatebacket/php-mysql-crud/
# --------------------------------------- Route53 parameters -----------------------------------------------------
  ALBHostedZoneId:
    Type: String
    Default: Z215JYRZR1TBD5
    Description: Route 53 Hosted Zone ID (Application Load Balancers)
  DomainName:
    Type: String
    Default: oleksandrklochko.click
  HostedZoneId:
    Type: String
    Default: Z0791780307CLL6KUZTNH
# --------------------------------------- Network parameters -----------------------------------------------------
  CustomIP:
    Type: String
    AllowedValues: [31.129.232.107/30, 0.0.0.0/0]
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16
    MinLength: 9
    MaxLength: 18
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.1.0/24
    MinLength: 9
    MaxLength: 18
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.0.2.0/24
    MinLength: 9
    MaxLength: 18
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.0.3.0/24
    MinLength: 9
    MaxLength: 18
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.0.4.0/24
    MinLength: 9
    MaxLength: 18
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  PrivateSubnetRDS1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.0.5.0/24
    MinLength: 9
    MaxLength: 18
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  PrivateSubnetRDS2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.0.6.0/24
    MinLength: 9
    MaxLength: 18
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
# --------------------------------------- DataBase parameters -----------------------------------------------------
  DBName:
    Default: crud
    Description: MySQL database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBPasswd:
    NoEcho: true
    Description: The database user account password
    Type: String
    MinLength: 8
    MaxLength: 41
    AllowedPattern: ^[a-zA-Z0-9]*$
  DBMasterpass:
    NoEcho: true
    Description: The database user account password
    Type: String
    MinLength: 8
    MaxLength: 41
    AllowedPattern: ^[a-zA-Z0-9]*$ 
  DBMasterUser:
    Default: admin
    NoEcho: 'true'
    Description: Username for MySQL database access
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBuser:
    Default: aleks
    NoEcho: 'true'
    Description: Username for MySQL database access
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBAllocatedStorage:
    Default: '20'
    Description: The size of the database (Gb)
    Type: Number
    MinValue: '20'
    MaxValue: '100'
    ConstraintDescription: must be between 20 and 100Gb.
  DBInstanceClass:
    Description: The database instance type
    Type: String
    Default: db.t3.micro
    AllowedValues: [db.t2.micro, db.t3.micro, db.t4g.micro]

# --------------------------------------- Describe resources ------------------------------------------------------   
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  EIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  NatGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 'EIP.AllocationId'
      SubnetId: !Ref PublicSubnet1
# --------------------------------------- Define Subnets ----------------------------------------------------------
# Define public subnets for ALB
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)
# Define private subnets for ASG
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)
# Define private subnets for RDS
  PrivateSubnetRDS1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnetRDS1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet RDS1
  PrivateSubnetRDS2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnetRDS2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet RDS2
# --------------------------------------- Define route tables -----------------------------------------------------
# Define public route table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public_RT
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2 
# Define private route table 
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} NAT_RT
  DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet2
# Define private route table for RDS
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} RDS_RT
  PrivateSubnetRDS1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnetRDS1
  PrivateSubnetRDS2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnetRDS2
# --------------------------------------- Define Rds subnets group ------------------------------------------------
  DBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup" 
    Properties: 
      DBSubnetGroupDescription: DBSubnetGroup
      DBSubnetGroupName: DBSubnetGroupCrud
      SubnetIds: 
        - !Ref PrivateSubnetRDS1
        - !Ref PrivateSubnetRDS2
#---------------------------------------- Define Security Groups -------------------------------------------------
  SecurityGroupASG:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Allow HTTP trafic from ALB to EC2
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - Description: Allow all outbound traffic
          IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref SecurityGroupALB
      Tags: 
        - Key: Name
          Value: ASG_SG
  SecurityGroupALB:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Allow HTTP and HTTPS trafic from specific IP to ALB
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - Description: Allow all outbound trafic
          IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref CustomIP 
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref CustomIP
      Tags: 
        - Key: Name
          Value: ALB_SG
  SecurityGroupRDS:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Allow access to port 3306 trafic from EC2 ASG
      VpcId: !Ref VPC
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref SecurityGroupASG
      Tags: 
        - Key: Name
          Value: RDS_SG
# ----------------------------------------Define IAM --------------------------------------------------------------
  S3Readonly: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
  RolePolicies: 
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: S3ReadOnlyPolicy
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: Allow
            Action:
              - 's3:Get*'
              - 's3:List*'
              - 's3-object-lambda:Get*'
              - 's3-object-lambda:List*'
            Resource: '*'
      Roles:
        - 
          Ref: S3Readonly  
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: InstanceProfile
      Path: "/"
      Roles:
        -
          Ref: "S3Readonly"
# --------------------------------------- Configuration RDS ------------------------------------------------------
  RDS:
    Type: AWS::RDS::DBInstance
    Properties: 
      AllocatedStorage: !Ref DBAllocatedStorage
      DBInstanceClass: !Ref DBInstanceClass
      DBName: !Ref DBName
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      DBSubnetGroupName: !Ref DBSubnetGroup
      Engine: mysql
      MasterUsername: !Ref DBMasterUser
      MasterUserPassword: !Ref DBMasterpass
      MultiAZ: false
      NetworkType: IPV4
      Port: 3306
      PubliclyAccessible: false
      StorageEncrypted: false
      StorageType: gp2
      VPCSecurityGroups:
        - !Ref SecurityGroupRDS
# -------------------------------------- Application Load Balancer -------------------------------------------------
  ApplicationLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Type: application 
      IpAddressType: ipv4
      Scheme: internet-facing
      Subnets: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref SecurityGroupALB
  ALBListenerHTTP:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: "redirect"
          RedirectConfig:
            Protocol: "HTTPS"
            Port: 443
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: "HTTP"
  ALBListenerHTTPS:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: "forward"
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      SslPolicy: ELBSecurityPolicy-TLS13-1-2-2021-06
      Certificates:
        - CertificateArn: !Ref MyCertificate
      Port: 443
      Protocol: "HTTPS"
  TargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 120
      HealthCheckPath: "/"
      Port: 80
      Protocol: "HTTP"
      HealthCheckPort: "traffic-port"
      HealthCheckProtocol: "HTTP"
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      TargetType: instance
      Matcher: 
        HttpCode: "200"
      HealthyThresholdCount: 5
      VpcId: !Ref VPC
      Name: "target-group-crud"
      HealthCheckEnabled: true
  LaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateName: !Sub '${AWS::StackName}-auto-scaling-launch-template'
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt
            - InstanceProfile
            - Arn
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            Groups:
              - !Ref SecurityGroupASG
            DeleteOnTermination: true
        Placement:
          Tenancy: default
        ImageId: !Ref AmiId
        KeyName: !Ref KeyName
        InstanceType: !Ref InstanceType
        UserData:
          Fn::Base64:
            !Sub |
              #!/bin/bash
              # Declare environment variables
              S3_BUCKET=${S3bucketURI}
              DB_HOSTNAME=${RDS.Endpoint.Address}
              DB_NAME=${DBName}
              DB_USERNAME=${DBuser}
              DB_PASSWORD=${DBPasswd}
              DB_ROOT_PASS=${DBMasterpass}
              DB_ROOT_USER=${DBMasterUser}
              # Install all necessary packages
              yum update -y
              sudo yum install -y gcc-c++ zlib-devel 
              sudo amazon-linux-extras enable -y php8.1
              sudo yum clean -y metadata
              sudo yum install -y php php-devel
              sudo yum install -y php-{pear,cgi,pdo,common,curl,mbstring,gd,mysqlnd,gettext,bcmath,json,xml,fpm,intl,zip}
              sudo yum install -y httpd
              sudo yum install -y mysql
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
              # Copy applications' code from S3
              sudo aws s3 cp $S3_BUCKET /var/www/html --recursive
              # Give appropriate rights
              sudo usermod -a -G apache ec2-user
              sudo chown -R ec2-user:apache /var/www
              sudo chmod 2775 /var/www
              find /var/www -type d -exec sudo chmod 2775 {} \;
              find /var/www -type f -exec sudo chmod 0664 {} \;
              # Create MySQL database and user
              sudo mysql -u $DB_ROOT_USER -p$DB_ROOT_PASS -h $DB_HOSTNAME -e "create user '$DB_USERNAME'@'%' IDENTIFIED BY '$DB_PASSWORD';GRANT ALL ON $DB_NAME.* TO '$DB_USERNAME'@'%';FLUSH PRIVILEGES;"
              sudo mysql -u $DB_USERNAME -p$DB_PASSWORD -h $DB_HOSTNAME < /var/www/html/database/script.sql
              # Substitude environment variables to db.php file
              sudo sed -i -e "s/'localhost'/'$DB_HOSTNAME'/" /var/www/html/db.php
              sudo sed -i -e "s/'php_mysql_crud'/'$DB_NAME'/" /var/www/html/db.php
              sudo sed -i -e "s/'root'/'$DB_USERNAME'/" /var/www/html/db.php
              sudo sed -i -e "s/'password123'/'$DB_PASSWORD'/" /var/www/html/db.php
              # Start the web server
              sudo systemctl start httpd
              sudo systemctl enable httpd
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize: '1'
      MaxSize: '3'
      DesiredCapacity: '1'
      HealthCheckType: ELB
      HealthCheckGracePeriod: 360
      DefaultInstanceWarmup: 180
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      TargetGroupARNs:
      - !Ref TargetGroup
#---------------------------------- Cloudwatch Alarms and Autoscalling policy --------------------------------------
  PolicyAddInstance:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: SimpleScaling
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: 1
  PolicyRemoveInstance:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: SimpleScaling
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: -1
  RequestpertargetAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm when requests per target more than 10 in 1 minute
      AlarmName: RequestPerTargetMoreThan10
      AlarmActions:
        - !Ref PolicyAddInstance
      Dimensions:
        - Name: TargetGroup
          Value: !GetAtt TargetGroup.TargetGroupFullName      
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      OKActions:
        - !Ref PolicyRemoveInstance 
      MetricName: RequestCountPerTarget
      Namespace: AWS/ApplicationELB
      Period: 300
      Statistic: Sum
      Threshold: 10
      Unit: None
# --------------------------------------------Route53 and certificate ----------------------------------------------
  MyCertificate: 
    Type: "AWS::CertificateManager::Certificate"
    Properties: 
      DomainName: !Ref DomainName
      ValidationMethod: DNS
  DnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: A
      AliasTarget: 
        DNSName: !GetAtt ApplicationLoadBalancer.DNSName
        HostedZoneId: !Ref ALBHostedZoneId
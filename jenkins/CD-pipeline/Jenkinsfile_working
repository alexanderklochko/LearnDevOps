properties([
    parameters([
        [$class: 'ChoiceParameter', 
            choiceType: 'PT_SINGLE_SELECT', 
            description: 'Select Tag image from the DockerHub List', 
            name: 'Tag', 
            script: [$class: 'ScriptlerScript',
                    scriptlerScriptId:'get_tags.groovy',
                    isSandboxed: false
            ]
        ]         
    ])
])
pipeline {
    agent any
    parameters {
        choice(name: "ENV", choices: ["dev", "qa"], description: "Choose appropriate environment")
    }
    environment {
        DEPLOY_TO = "${params.ENV}"
        DEFAULT_SUBJECT = "Health Check: $BUILD_STATUS"
    }  
    stages {
        stage('Get deployment server IP') {
            steps{
            script {
                SERVER_IP = sh (
                    script: 'aws ec2 describe-instances --region eu-north-1 --filters Name=tag:env,Values=${DEPLOY_TO} --query "Reservations[*].Instances[*].[PublicIpAddress]" | \
                     grep -E -o "([0-9]{1,3}[\\.]){3}[0-9]{1,3}"',
                    returnStdout: true
                    ).trim()
                }
            }
        }
        stage('Deploy to environment') {
            steps {
                script {
                    sh """ssh jenkins@${SERVER_IP} 'docker pull oleksandriyskiy/petclinic:${params.Tag} &&
                          docker rm -f petclinic &&
                          docker run -dp 8080:8080 --name petclinic oleksandriyskiy/petclinic:${params.Tag}'
                       """
                }
            }
        }
        stage('Health check') {
            steps {
                script {
                sh '''
                #!/usr/bin/env bash
                set -x
                CURL_MAX_TIME=15
                ATTEMPTS=25
                SLEEP_TIME=20
                sleep 30
                for ATTEMPT in $(seq ${ATTEMPTS}); do
                    echo "Attempt ${ATTEMPT} of ${ATTEMPTS}"
                    echo "Curling against the Jenkins server"
                    echo "Should expect a 200 within \${CURL_MAX_TIME} seconds"
                    STATUS_CODE=$(curl -sL -w "%{http_code}" ${SERVER_IP}:8080 -o /dev/null \
                                                                                --max-time ${CURL_MAX_TIME})
                    if [[ "$STATUS_CODE" == "200" ]]; then
                        echo "Petclinic has come up and ready to use after ${ATTEMPT} of ${ATTEMPTS} attempts"
                    exit 0
                    else
                        echo "Petclinic did not return a correct status code yet"
                        echo "Returned: $STATUS_CODE"
                        sleep ${SLEEP_TIME}
                    fi
                done
                echo "Petclinic still hasn't returned a 200 status code ${ATTEMPTS} attempts"
                exit 1
                '''
                }
            }
        }
    }
    post{
        always{
            emailext to: "olekskloch@gmail.com",
            subject: "${JOB_NAME} pipeline",
            body: "The ${JOB_NAME} build number ${BUILD_ID} is ${DEFAULT_SUBJECT}",
            attachLog: true
        }
    }   
}

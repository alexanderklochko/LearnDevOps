properties([
    parameters([
        [$class: 'ChoiceParameter', 
            choiceType: 'PT_SINGLE_SELECT', 
            description: 'Select Tag image from the DockerHub List', 
            filterLength: 1, 
            filterable: false, 
            name: 'Tag', 
            script: [$class: 'GroovyScript',
                fallbackScript: [classpath: [], sandbox: false, script: 'return ["Could not get component"]'],
                script: [classpath: [], sandbox: false, 
                    script: """
                    import groovy.json.JsonSlurper
                    docker_image_tags_url = "https://registry.hub.docker.com/v2/repositories/oleksandriyskiy/petclinic/tags"
                        try {
                        def http_client = new URL(docker_image_tags_url).openConnection() as HttpURLConnection
                        http_client.setRequestMethod('GET')
                        http_client.connect()
                        def dockerhub_response = [:]    
                        if (http_client.responseCode == 200) {
                            dockerhub_response = new JsonSlurper().parseText(http_client.inputStream.getText('UTF-8'))
                        } else {
                            println("HTTP response error")
                            System.exit(0)
                        }
                        def image_tag_list = []
                        dockerhub_response.results.each { tag_metadata ->
                        image_tag_list.add(tag_metadata.name)    
                        }
                        return image_tag_list.sort()
                    } catch (Exception e) {
                        println(e)
                    }
                    """.stripIndent().trim()
                ] 
            ]
        ]
    ])
])
pipeline {
    agent any
    parameters {
        choice(name: "ENV", choices: ["dev", "qa"], description: "Choose appropriate environment")
    }
    environment {
        DEPLOY_TO = "${params.ENV}"
        DEFAULT_SUBJECT = "Health Check: $BUILD_STATUS"
        DEV_IP = "16.170.201.198"
        QA_IP = ""
    }
    stages {
        stage('Define deploy environment') {
            when {
                anyOf {
                    environment name: 'DEPLOY_TO', value: 'dev'
                    environment name: 'DEPLOY_TO', value: 'qa'
                }
            }
            environment {
                SERVER_IP = "${QA_IP} | ${DEV_IP}"
            }
            steps {
                script {
                    sh """
                    #!/bin/bash
                    ssh -tt jenkins@${SERVER_IP} <<EOF
                    docker rm --force petclinic
                    docker pull oleksandriyskiy/petclinic:${params.Tag}
                    docker run -dp 8080:8080 --name petclinic oleksandriyskiy/petclinic:${params.Tag}
                    exit 0
                    EOF"""
                }
                script {
                    sh '''
                    #!/usr/bin/env bash
                    ATTEMPTS=25
                    SLEEP_TIME=20
                    for ATTEMPT in $(seq ${ATTEMPTS}); do
                        echo "Attempt ${ATTEMPT} of ${ATTEMPTS}"
                        echo "Curling against the Jenkins server"
                        STATUS_CODE=$(curl -Is ${SERVER_IP}:8080 | head -n 1 | cut -b 10-12)
                        if [[ "$STATUS_CODE" == "200" ]]; then
                            echo "Petclinic has come up and ready to use after ${ATTEMPT} of ${ATTEMPTS} attempts"
                            exit 0
                        else
                            echo "Petclinic did not return a correct status code yet"
                            echo "Returned: $STATUS_CODE"
                            sleep ${SLEEP_TIME}
                        fi
                    done
                    echo "Petclinic still hasn't returned a 200 status code ${ATTEMPTS} attempts"
                    exit 1
                    '''
                }
            }
        }    
    }
    post{
        always{
            emailext to: "olekskloch@gmail.com",
            subject: "${JOB_NAME} pipeline",
            body: "The ${JOB_NAME} build number ${BUILD_ID} is ${DEFAULT_SUBJECT}",
            attachLog: true
        }
    }   
}
pipeline { 
    agent {
        node {
            label 'linux_node'
        }
    }
    options {
        buildDiscarder logRotator( 
                    daysToKeepStr: '3', 
                    numToKeepStr: '3'
            ) 
    }
    triggers {
        gitlab(
          triggerOnPush: false, 
          triggerOnMergeRequest: true, triggerOpenMergeRequestOnPush: 'never',
          triggerOnAcceptedMergeRequest: true,
          branchFilterType: 'NameBasedFilter',
          includeBranchesSpec: 'main')
    }
    stages { 
        stage('Cleanup Workspace') {
            steps {
                cleanWs()
                echo 'Cleaned Up Workspace For Project'
            }
        }
        stage('Code Checkout') {
            steps {
                checkout scmGit(
                    branches: [[name: '*/main']], 
                    extensions: [], 
                    userRemoteConfigs: [[credentialsId: 'petclinic', url: 'git@git.epam.com:oleksandr_klochko/spring-petclinic.git']])  
            }
        }
        stage('Sonarqube') {
            environment {
                SCANNER_HOME = tool 'Sonar_scaner'
                PROJECT_NAME = 'scripted_pipeline'
            }
            steps {
                withSonarQubeEnv(credentialsId: 'sonar_admin', installationName: 'sonar') {
                sh "${SCANNER_HOME}/bin/sonar-scanner -Dsonar.java.binaries=. \
                    -Dsonar.projectKey=$PROJECT_NAME \
                    -Dsonar.sources=."
                }
                timeout(time: 10, unit: 'MINUTES') {
                waitForQualityGate abortPipeline: true
                }
            }
        }
        stage('Build app') {
            steps {    
                sh './mvnw package'
            }
        }
        stage('Docker image build') {
            steps {    
      	        sh 'docker build -t oleksandriyskiy/petclinic:${BUILD_NUMBER} -t oleksandriyskiy/petclinic:latest .'
            }
        }
        stage('Docker Push') {
            steps {
      	        withCredentials([usernamePassword(credentialsId: 'dockerHub', passwordVariable: 'dockerHubPassword', usernameVariable: 'dockerHubUser')]) {
        	    sh 'docker login -u ${dockerHubUser} -p ${dockerHubPassword}'
                sh 'docker push oleksandriyskiy/petclinic:latest' 
                sh 'docker push oleksandriyskiy/petclinic:${BUILD_NUMBER}' 
                }
            }
        }
        stage('Docker logout') {
            steps {    
      	        sh 'docker logout'
            }
        }
    }
}  
